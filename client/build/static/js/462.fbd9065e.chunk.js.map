{"version":3,"file":"static/js/462.fbd9065e.chunk.js","mappings":"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","sources":["api/index.ts","components/holdings/styled.tsx","components/holdings/HoldingCard.tsx","components/holdings/ActualHoldings.tsx","state/actions/holdings.tsx","components/add-transaction/styled.tsx","components/add-transaction/FormInput.tsx","components/add-transaction/CryptoSelect.tsx","components/add-transaction/TransactionType.tsx","components/add-transaction/updateHoldingStatistics.ts","components/add-transaction/Form.tsx","components/add-transaction/AddTransaction.tsx","pages/Holdings.tsx","pages/screens/NeedToLogin.tsx","state/actions/transactions.tsx","utils/date-format.ts","utils/ls-userId.ts","utils/number-format.ts"],"sourcesContent":["import axios from \"axios\";\nimport { HoldingItem, Transaction, AuthData } from \"../common/modelTypes\";\n\nconst API = axios.create({baseURL: process.env.REACT_APP_API /* \"http://localhost:8000\" */   })\n\n//Holdings\nexport const fetchHoldings = (userId: string) =>\n  API.get(\"/holdings\", { params: { userId: userId } });\n\nexport const addHolding = (newHolding: HoldingItem) =>\n  API.post(\"/holdings\", newHolding);\n\nexport const updateHolding = (name: string, updatedHolding: HoldingItem) =>\n  API.patch(`${\"/holdings\"}/${name}`, updatedHolding);\n\n//Pokud se všechen Holding prodal (tzn. držený amount = 0), tak mažu z databáze. V případném opětovném nákupu se vytvoří znovu a od té doby se znovu počítá průměrná cena a P/L\nexport const deleteHolding = (formData: Object) =>\n  API.post(`${\"/holdings\"}/delete`, formData);\n\n//Transactions history\nexport const fetchTransactions = (userId: string) =>\n  API.get(\"/transactions\", { params: { userId: userId } });\n\nexport const addTransaction = (newTransaction: Transaction) =>\n  API.post(\"/transactions\", newTransaction);\n\n//Auth\nexport const registerUser = (userData: AuthData) =>\n  API.post(\"/register\", userData);\n\nexport const loginUser = (userData: AuthData) => API.post(\"/login\", userData);\n","import styled from \"styled-components\";\nimport {\n  centerItems,\n  theme,\n  positiveChange,\n  negativeChange,\n} from \"../../common/theme\";\n\nexport const StyledHoldingCard = styled.div`\n  .positive-change {\n    ${positiveChange}\n    font-size: 15px;\n    font-weight: bold;\n  }\n  .negative-change {\n    ${negativeChange}\n    font-size: 15px;\n    font-weight: bold;\n  }\n\n  .titles-container {\n    margin-top: 3%;\n    margin-left: 15%;\n  }\n  .data-container {\n    text-align: right;\n    margin-top: 3%;\n    margin-right: 15%;\n  }\n  .card-paper {\n    ${theme.boxShadow}\n    font-size: 14px\n  }\n  .card-header-container {\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    height: 100px;\n  }\n\n  .card-header-logo-name-container {\n    ${centerItems}\n    margin: 4%;\n    h2 {\n      margin-left: 6%;\n    }\n  }\n  .card-header-price-container {\n    display: flex;\n    justify-content: center;\n    align-items: flex-end;\n    margin-right: 4%;\n  }\n  .price {\n    font-size: 20px;\n  }\n  .card-buttons-container {\n    ${centerItems}\n  }\n  .PL {\n    font-size: 15px;\n    font-weight: bold;\n  }\n`;\n\nexport const StyledHoldings = styled.div`\n  margin-top: 2%;\n  width: 100%;\n`;\n\nexport const StyledWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n\n  .no-holdings-found {\n    display: flex;\n    justify-content: center;\n    flex-direction: column;\n    margin-top: 10%;\n    button {\n      margin: 2%;\n    }\n    @media only screen and (max-width: 615px) {\n      h1 {\n        font-size: 18px;\n      }\n    }\n  }\n`;\n","import { useContext, FC } from \"react\";\nimport { BiPlusCircle, BiMinusCircle } from \"react-icons/bi\";\nimport { Grid, Paper, Container } from \"@mui/material\";\nimport { RootState } from \"../..\";\nimport { HoldingItem } from \"../../common/modelTypes\";\nimport IconButton from \"@mui/material/IconButton\";\nimport DashboardContext from \"../../state/DashboardContext\";\nimport FormContext from \"../../state/FormContext\";\nimport { intlNumberFormat } from \"../../utils/number-format\";\nimport { useAppSelector } from \"../../state/hooks\";\nimport { DashboardCryptoItem } from \"../../common/modelTypes\";\nimport { formatDate } from \"../../utils/date-format\";\nimport { StyledHoldingCard } from \"./styled\";\n\nconst HoldingCard: FC = () => {\n  const { dashboardData } = useContext(DashboardContext);\n  const { setFormShown, setSelectedCrypto, setTransactionType } =\n    useContext(FormContext);\n\n  const holdings = useAppSelector((state: RootState) => state.holdings);\n\n  return (\n    <Container>\n      <StyledHoldingCard>\n        <Grid container spacing={2.5}>\n          {holdings.map((holding: HoldingItem) => {\n            const cryptoObject = dashboardData.find(\n              (item: DashboardCryptoItem) =>\n                item.name.toLowerCase() === holding.name.toLowerCase()\n            );\n            const PLUSD =\n              holding.amount * cryptoObject?.current_price! -\n              holding.amount * holding.price;\n\n            const PLpercentage = PLUSD / (holding.amount * holding.price);\n            const lastUpdate = new Date(cryptoObject?.last_updated!);\n            const lastTransaction = new Date(holding.date);\n\n            return (\n              <Grid item xs={12} sm={12} md={6} lg={4} key={holding.name}>\n                <Paper className=\"card-paper\">\n                  <div className=\"card-header-container\">\n                    <div className=\"card-header-logo-name-container\">\n                      <img\n                        src={cryptoObject?.imageURL}\n                        alt=\"icon\"\n                        width=\"40px\"\n                        height=\"40px\"\n                      />\n                      <h2>{holding.name}</h2>\n                    </div>\n                    <div className=\"card-header-price-container\">\n                      <h5 className=\"price\">\n                        {intlNumberFormat(cryptoObject?.current_price!, \"usd\")}\n                      </h5>\n                    </div>\n                  </div>\n                  <Grid container>\n                    <Grid item xs={6} sm={6} md={6}>\n                      <div className=\"titles-container\">\n                        <p>Average purch. price:</p>\n                        <p>Holding amount:</p>\n                        <p>Total purchase price:</p>\n                        <p className=\"PL\">Total P/L USD:</p>\n                        <p className=\"PL\">Total P/L %:</p>\n                        <hr></hr>\n                        <p>Last transaction:</p>\n                        <p>Last updated:</p>\n                      </div>\n                    </Grid>\n                    <Grid item xs={6} sm={6} md={6}>\n                      <div className=\"data-container\">\n                        <p>{intlNumberFormat(holding.price, \"usd\")}</p>\n                        <p>{holding.amount}</p>\n                        <p>\n                          {intlNumberFormat(\n                            holding.amount * holding.price,\n                            \"usd\"\n                          )}\n                        </p>\n\n                        <p\n                          className={\n                            PLUSD > 0 ? \"positive-change\" : \"negative-change\"\n                          }\n                        >\n                          {intlNumberFormat(PLUSD, \"usd\")}\n                        </p>\n                        <p\n                          className={\n                            PLUSD > 0 ? \"positive-change\" : \"negative-change\"\n                          }\n                        >{`${PLpercentage.toFixed(2)}%`}</p>\n                        <hr></hr>\n                        <p>{formatDate(lastTransaction)}</p>\n                        <p>{lastUpdate.toLocaleTimeString()}</p>\n                      </div>\n                    </Grid>\n                  </Grid>\n                  <div className=\"card-buttons-container\">\n                    <IconButton\n                      onClick={() => {\n                        setFormShown(true);\n                        setSelectedCrypto(holding.name);\n                        setTransactionType(\"buy\");\n                      }}\n                    >\n                      <BiPlusCircle\n                        style={{\n                          color: \"green\",\n                          width: \"45px\",\n                          height: \"45px\",\n                        }}\n                      />\n                    </IconButton>\n\n                    <IconButton\n                      onClick={() => {\n                        setFormShown(true);\n                        setSelectedCrypto(holding.name);\n                        setTransactionType(\"sell\");\n                      }}\n                    >\n                      <BiMinusCircle\n                        style={{\n                          color: \"red\",\n                          width: \"45px\",\n                          height: \"45px\",\n                        }}\n                      />\n                    </IconButton>\n                  </div>\n                </Paper>\n              </Grid>\n            );\n          })}\n        </Grid>\n      </StyledHoldingCard>\n    </Container>\n  );\n};\n\nexport default HoldingCard;\n","import { StyledHoldings } from \"./styled\";\nimport { useAppSelector, useAppDispatch } from \"../../state/hooks\";\nimport { RootState } from \"../..\";\nimport { useContext, useEffect, FC } from \"react\";\nimport FormContext from \"../../state/FormContext\";\nimport { StyledWrapper } from \"./styled\";\nimport { lsUserId } from \"../../utils/ls-userId\";\nimport { getHoldings } from \"../../state/actions/holdings\";\nimport DashboardContext from \"../../state/DashboardContext\";\nimport HoldingCard from \"./HoldingCard\";\nimport LoadingSpinner from \"../layout/LoadingSpinner\";\nimport MyButton from \"../layout/MyButton\";\n\nconst ActualHoldings: FC = () => {\n  const holdings = useAppSelector((state: RootState) => state.holdings);\n  const loadingState = useAppSelector(\n    (state: RootState) => state.errorAndLoading\n  );\n  const dispatch = useAppDispatch();\n  const { setFormShown, setSelectedCrypto, setTransactionType, formShown } =\n    useContext(FormContext);\n  const { getDashboardData } = useContext(DashboardContext);\n  const userId = lsUserId();\n\n  const onClickButton = (): void => {\n    setFormShown(true);\n    setSelectedCrypto(\"Bitcoin\");\n    setTransactionType(\"buy\");\n  };\n\n  useEffect(() => {\n    getDashboardData();\n    dispatch(getHoldings(userId));\n  }, []);\n\n  return (\n    <div>\n      <StyledHoldings>\n        {loadingState.loading ? (\n          <LoadingSpinner />\n        ) : holdings.length > 0 ? (\n          <HoldingCard />\n        ) : (\n          formShown && (\n            <StyledWrapper>\n              <div className=\"no-holdings-found\">\n                <h1>No holdings found. Please add one.</h1>\n                <MyButton\n                  text=\"Add transaction\"\n                  onClick={onClickButton}\n                  variant=\"contained\"\n                  purple\n                />\n              </div>\n            </StyledWrapper>\n          )\n        )}\n      </StyledHoldings>\n    </div>\n  );\n};\nexport default ActualHoldings;\n","import {\n  FETCH_ALL_HOLDINGS,\n  ADD_HOLDING,\n  UPDATE_HOLDING,\n  SET_ERROR,\n  DELETE_HOLDING,\n  START_LOADING,\n  STOP_LOADING,\n} from \"../../constants/actionTypes\";\nimport { HoldingItem } from \"../../common/modelTypes\";\nimport { Dispatch } from \"@reduxjs/toolkit\";\nimport {\n  HoldingsTransactionsActions,\n  ErrorLoadingActions,\n} from \"../../common/actionTypes\";\n\nimport * as api from \"../../api/index\";\n\nexport const getHoldings =\n  (userId: string) =>\n  async (\n    dispatch: Dispatch<HoldingsTransactionsActions | ErrorLoadingActions>\n  ) => {\n    try {\n      dispatch({ type: START_LOADING });\n\n      const { data } = await api.fetchHoldings(userId); //const response = await fetch(...)\n      dispatch({ type: FETCH_ALL_HOLDINGS, payload: data });\n      if (data) {\n        setTimeout(() => {\n          dispatch({ type: STOP_LOADING });\n        }, 100);\n      }\n    } catch (error: any) {\n      dispatch({ type: STOP_LOADING });\n      const errMsg =\n        error.response && error.response.data?.message\n          ? error.response.data.message\n          : error.message;\n      dispatch({ type: SET_ERROR, payload: errMsg });\n    }\n  };\n\nexport const addHolding =\n  (holding: HoldingItem) =>\n  async (\n    dispatch: Dispatch<HoldingsTransactionsActions | ErrorLoadingActions>\n  ) => {\n    try {\n      dispatch({ type: START_LOADING });\n      const { data } = await api.addHolding(holding); // data se hned destructuruje response, která má v sobě vždycky data object.\n\n      dispatch({ type: ADD_HOLDING, payload: data });\n      if (data) {\n        setTimeout(() => {\n          dispatch({ type: STOP_LOADING });\n        }, 100);\n      }\n    } catch (error: any) {\n      dispatch({ type: STOP_LOADING });\n      const errMsg =\n        error.response && error.response.data?.message\n          ? error.response.data.message\n          : error.message;\n      dispatch({ type: SET_ERROR, payload: errMsg });\n    }\n  };\n\nexport const updateHolding =\n  (name: string, holding: HoldingItem) =>\n  async (\n    dispatch: Dispatch<HoldingsTransactionsActions | ErrorLoadingActions>\n  ) => {\n    try {\n      dispatch({ type: START_LOADING });\n      const { data } = await api.updateHolding(name, holding);\n\n      dispatch({ type: UPDATE_HOLDING, payload: data });\n      if (data) {\n        setTimeout(() => {\n          dispatch({ type: STOP_LOADING });\n        }, 100);\n      }\n    } catch (error: any) {\n      dispatch({ type: STOP_LOADING });\n      const errMsg =\n        error.response && error.response.data?.message\n          ? error.response.data.message\n          : error.message;\n      dispatch({ type: SET_ERROR, payload: errMsg });\n    }\n  };\n\n//V případě, že držený amount klesne na 0, mažu z databaze.\nexport const deleteHolding =\n  (formData: Object) =>\n  async (\n    dispatch: Dispatch<HoldingsTransactionsActions | ErrorLoadingActions>\n  ) => {\n    try {\n      dispatch({ type: START_LOADING });\n      const { data } = await api.deleteHolding(formData);\n\n      console.log(data);\n      dispatch({ type: DELETE_HOLDING, payload: data });\n      if (data) {\n        setTimeout(() => {\n          dispatch({ type: STOP_LOADING });\n        }, 100);\n      }\n    } catch (error: any) {\n      dispatch({ type: STOP_LOADING });\n      const errMsg =\n        error.response && error.response.data?.message\n          ? error.response.data.message\n          : error.message;\n      dispatch({ type: SET_ERROR, payload: errMsg });\n    }\n  };\n","import styled from \"styled-components\";\nimport { centerItems, theme } from \"../../common/theme\";\n\nexport const StyledAddTransaction = styled.div`\n  .button-container {\n    margin-top: 2%;\n    ${centerItems}\n  }\n  .select-crypto {\n    min-width: 200px;\n  }\n`;\n\nexport const StyledForm = styled.form`\n  display: flex;\n  justify-content: center;\n  height: 550px;\n\n  .form {\n    margin-top: 2%;\n    width: 450px;\n    height: 400px;\n    border-radius: ${theme.borderRadius};\n    ${theme.boxShadow};\n    ${centerItems};\n    background-color: white;\n    button {\n      margin: 2%;\n      margin-top: 4%;\n    }\n  }\n  .form-data-container {\n    width: 100%;\n\n    ${centerItems};\n    flex-direction: column;\n  }\n  .buttons-container {\n    width: 100%;\n    ${centerItems}\n  }\n\n  .display {\n    color: red;\n    font-size: 13px;\n  }\n  .hide {\n    display: none;\n  }\n`;\n\nexport const StyledCryptoName = styled.span`\n  margin-left: 10px;\n`;\nexport const StyledTransactionType = styled.div`\n  width: 100%;\n  .select-transaction-type {\n    display: flex;\n    justify-content: center;\n    width: 100%;\n  }\n  .select-transaction-type > * {\n    width: 100px;\n  }\n`;\n","import { FC } from \"react\";\nimport { TextField } from \"@mui/material\";\nimport { InputAdornment } from \"@mui/material\";\n\ntype InputProps = {\n  name?: string;\n  input: {\n    id: string;\n    type: string;\n    value?: string | number;\n    onChange?: (e: React.ChangeEvent<HTMLInputElement>) => void;\n    min?: number;\n    step?: number;\n  };\n  startAdornment?: string;\n  autoFocus?: boolean;\n};\n\nconst FormInput: FC<InputProps> = ({\n  input,\n  startAdornment,\n  autoFocus,\n  name,\n}) => {\n  return (\n    <div>\n      <TextField\n        className=\"inputs\"\n        label={input.id}\n        variant=\"standard\"\n        size=\"small\"\n        inputProps={{ ...input }}\n        color=\"primary\"\n        autoFocus={autoFocus}\n        required={true}\n        margin=\"dense\"\n        name={name}\n        InputProps={{\n          startAdornment: (\n            <InputAdornment position=\"start\">{startAdornment}</InputAdornment>\n          ),\n        }}\n        sx={{\n          width: 200,\n          \"& label.Mui-focused\": {\n            color: \"#6c1c6a\",\n          },\n          \"& .MuiInput-underline:after\": {\n            borderBottomColor: \"#6c1c6a\",\n          },\n          \"& .MuiOutlinedInput-root\": {\n            \"&.Mui-focused fieldset\": {\n              borderColor: \"#6c1c6a\",\n            },\n          },\n        }}\n      />\n    </div>\n  );\n};\n\nexport default FormInput;\n","import { useContext, useEffect, FC } from \"react\";\nimport {\n  FormControl,\n  Select,\n  InputLabel,\n  MenuItem,\n  SelectChangeEvent,\n} from \"@mui/material\";\nimport DashboardContext from \"../../state/DashboardContext\";\nimport { StyledCryptoName } from \"./styled\";\nimport { DashboardCryptoItem } from \"../../common/modelTypes\";\nimport { useAppSelector } from \"../../state/hooks\";\nimport FormContext from \"../../state/FormContext\";\n\ntype CryptoSelectProps = {\n  selected: (crypto: string) => void;\n  value: string;\n};\nconst CryptoSelect: FC<CryptoSelectProps> = (props) => {\n  const { dashboardData } = useContext(DashboardContext);\n  const { transactionType, setTransactionType } = useContext(FormContext);\n  const holdings = useAppSelector((state) => state.holdings);\n\n  useEffect(() => {\n    setTransactionType(transactionType);\n  }, [transactionType]);\n\n  const selectCryptoHandler = (e: SelectChangeEvent<unknown>): void => {\n    props.selected(e.target.value as string);\n  };\n\n  return (\n    <div>\n      <FormControl variant=\"filled\" size=\"small\" className=\"select-crypto\">\n        <InputLabel\n          id=\"crypto-select\"\n          sx={{ \"&.Mui-focused\": { color: \"#6c1c6a\" } }}\n        >\n          Select crypto:\n        </InputLabel>\n        <Select\n          labelId=\"crypto-select\"\n          id=\"crypto-select\"\n          label=\"crypto-select\"\n          value={props.value}\n          onChange={selectCryptoHandler}\n          required\n          variant=\"filled\"\n          sx={{\n            \"&:before\": {\n              borderColor: \"#6c1c6a\",\n            },\n            \"&:after\": {\n              borderColor: \"#6c1c6a\",\n            },\n          }}\n        >\n          {/* V případě \"SELL\" dá možnost pouze toho krypta, které držím (a mám tedy co prodávat). Při \"BUY\" dá možnost nákupu z celého crypta, jehož hodnoty se stáhly z API */}\n          {transactionType == \"buy\"\n            ? dashboardData?.map((crypto: DashboardCryptoItem) => {\n                return (\n                  <MenuItem\n                    key={crypto.name}\n                    value={crypto.name}\n                    sx={{ display: \"flex\" }}\n                  >\n                    <img src={crypto.imageURL} height=\"20px\" width=\"20px\" />\n                    <StyledCryptoName>{crypto.name}</StyledCryptoName>\n                  </MenuItem>\n                );\n              })\n            : holdings.map((holding: any) => {\n                const matchedCrypto = dashboardData?.find(\n                  (crypto) => crypto.name === holding.name\n                );\n                return (\n                  <MenuItem\n                    key={holding.name}\n                    value={holding.name}\n                    sx={{ display: \"flex\" }}\n                  >\n                    <img\n                      src={matchedCrypto!.imageURL}\n                      height=\"20px\"\n                      width=\"20px\"\n                    />\n                    <StyledCryptoName>{holding.name}</StyledCryptoName>\n                  </MenuItem>\n                );\n              })}\n        </Select>\n      </FormControl>\n    </div>\n  );\n};\n\nexport default CryptoSelect;\n","import ToggleButton from \"@mui/material/ToggleButton\";\nimport ToggleButtonGroup from \"@mui/material/ToggleButtonGroup\";\nimport { FC } from \"react\";\nimport { StyledTransactionType } from \"./styled\";\n\ntype TransactionTypeProps = {\n  buySell: string;\n  handleBuySellChange: (\n    e: React.MouseEvent<HTMLElement>,\n    newBuySell: \"buy\" | \"sell\"\n  ) => void;\n};\n\nconst TransactionType: FC<TransactionTypeProps> = ({\n  buySell,\n  handleBuySellChange,\n}) => {\n  return (\n    <StyledTransactionType>\n      <ToggleButtonGroup\n        value={buySell}\n        exclusive\n        onChange={handleBuySellChange}\n        className=\"select-transaction-type\"\n      >\n        <ToggleButton\n          value=\"buy\"\n          sx={{\n            \"&.MuiToggleButton-root\": {\n              backgroundColor: \"#f0f0f0\",\n              color: \"#797979\",\n            },\n            \"&&.MuiToggleButton-root:hover\": {\n              backgroundColor: \"#025E03\",\n              color: \"white\",\n            },\n            \"&.Mui-selected\": { backgroundColor: \"#008001\", color: \"white\" },\n            \"&.Mui-selected:hover\": { backgroundColor: \"red\", color: \"white\" },\n          }}\n        >\n          Buy\n        </ToggleButton>\n        <ToggleButton\n          value=\"sell\"\n          sx={{\n            \"&.MuiToggleButton-root\": {\n              backgroundColor: \"#f0f0f0\",\n              color: \"#797979\",\n            },\n            \"&&.MuiToggleButton-root:hover\": {\n              backgroundColor: \"#A40A0A\",\n              color: \"white\",\n            },\n            \"&.Mui-selected\": { backgroundColor: \"#C80B0B\", color: \"white\" },\n          }}\n        >\n          Sell\n        </ToggleButton>\n      </ToggleButtonGroup>\n    </StyledTransactionType>\n  );\n};\n\nexport default TransactionType;\n","//Funkce pro výpočty při update holdingu (průměrná cena, držené množství atd)\nimport { HoldingItem, Transaction } from \"../../common/modelTypes\";\n\n\nconst updateHoldingStatistics = (holdingToBeUpdated: HoldingItem, formItem?: Transaction) => {\n  const oldTotalPrice = holdingToBeUpdated.price * holdingToBeUpdated.amount;\n\n\n  if (formItem!.transactionType === \"buy\") {\n    //Průměrná nákupní cena\n    const newItemTotalPrice = formItem!.price * formItem!.amount;\n    const updatedAveragePrice =\n      (oldTotalPrice + newItemTotalPrice) /\n      (holdingToBeUpdated.amount + formItem!.amount);\n\n    //Vrátí upravený object (holding), který se pak nahraje do mongoDB\n   return  {\n      ...formItem,\n      price: updatedAveragePrice,\n      amount: holdingToBeUpdated.amount + formItem!.amount,\n      date: formItem!.date\n    };\n  } else if (formItem!.transactionType === \"sell\") {\n    return {\n      ...formItem,\n      price: holdingToBeUpdated.price,\n      amount: holdingToBeUpdated.amount - formItem!.amount,\n      date: formItem!.date\n    };\n  }\n  \n};\n\nexport default updateHoldingStatistics;\n","import React, { useState, useRef, useEffect, useContext, FC } from \"react\";\nimport FormInput from \"./FormInput\";\nimport { StyledForm } from \"./styled\";\nimport DashboardContext from \"../../state/DashboardContext\";\nimport FormContext from \"../../state/FormContext\";\nimport CryptoSelect from \"./CryptoSelect\";\nimport { useAppDispatch, useAppSelector } from \"../../state/hooks\";\nimport {\n  addHolding,\n  updateHolding,\n  deleteHolding,\n} from \"../../state/actions/holdings\";\nimport { addTransaction } from \"../../state/actions/transactions\";\nimport TransactionType from \"./TransactionType\";\nimport { lsUserId } from \"../../utils/ls-userId\";\nimport { RootState } from \"../..\";\nimport updateHoldingStatistics from \"./updateHoldingStatistics\";\nimport { HoldingItem } from \"../../common/modelTypes\";\nimport MyButton from \"../layout/MyButton\";\n\nconst Form: FC = () => {\n  const userId = lsUserId();\n\n  const initialState = {\n    transactionType: \"buy\",\n    userId,\n    name: \"\",\n    price: \"\",\n    amount: \"\",\n    date: \"\",\n  };\n\n  const [formData, setFormData] = useState(initialState);\n  const formRef = useRef<HTMLFormElement | null>(null);\n  const [existingHolding, setExistingHolding] = useState<HoldingItem>();\n  const [formIsValid, setFormIsValid] = useState<boolean>(true);\n\n  const dispatch = useAppDispatch();\n  const holdings = useAppSelector((state: RootState) => state.holdings);\n\n  const { getDashboardData } = useContext(DashboardContext);\n  const {\n    selectedCrypto,\n    transactionType,\n    setSelectedCrypto,\n    setFormShown,\n    setTransactionType,\n  } = useContext(FormContext);\n\n  //Při prvním načtení stáhne dashboard data (přes context.getDashboardData) a nastaví userID do formData (zde se sledují údaje, které budou zadany do formu)\n  useEffect(() => {\n    getDashboardData();\n    setFormData({ ...formData, userId });\n  }, []);\n\n  //Crypto name a Transaction type jdou přes context API, ukládám přes useEffect do formData objectu.\n  useEffect(() => {\n    setFormData({\n      ...formData,\n      name: selectedCrypto!,\n      transactionType: transactionType!,\n    });\n\n    //Při změně Crypto name a Transaction type ukládám již držené krypto podle názvu do setExistingHolding, aby se pak zobrazilo v případě špatně zadaného množství - viz. DOM\n    const existingItem = holdings.find(\n      (holding: HoldingItem) => holding.name === selectedCrypto!\n    );\n    setExistingHolding(existingItem);\n  }, [selectedCrypto, transactionType]);\n\n  const selectedCryptoInput = (crypto: string): void => {\n    setFormIsValid(true);\n    setSelectedCrypto(crypto);\n  };\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\n    //Když vyskočí hláška s invalid amount, po update inputů zmizí.\n    if (!formIsValid) {\n      setFormIsValid(true);\n    }\n    //Input name = initial state object properties\n    setFormData({ ...formData, [e.target.name]: e.target.value });\n  };\n\n  const onSubmitHandler = (e: React.SyntheticEvent): void => {\n    e.preventDefault();\n\n    //Existing item - aby se pak níže poslal do update nebo delete.\n    const existingItem = holdings.find(\n      (holding: HoldingItem) => holding.name === formData.name\n    );\n    /*    const existingItem = existingHolding as HoldingItem; */\n\n    //Validace, že nedavam transakci, kdy prodam vic nez aktualne drzim v Holdings - pak se prirazuje formIsValid state.\n    if (\n      (formData.transactionType === \"sell\" &&\n        existingItem.amount >= parseInt(formData.amount)) ||\n      formData.transactionType === \"buy\"\n    ) {\n      setFormIsValid(true);\n\n      const adjustedFormItem = {\n        ...formData,\n        price: parseInt(formData.price),\n        amount: parseInt(formData.amount),\n      };\n\n      //Clearing inputs\n      if (formRef.current !== null) {\n        formRef.current.reset();\n      }\n\n      setFormShown(false);\n\n      //Pokud dané krypto už aktuálně držím, proženu transakci přes updateHoldingStatistics funkci, kde se vypočítá nový holding objects vč. průměrné nák. ceny. Ten se potom pošle do reduceru\n      if (existingItem !== undefined) {\n        const updatedHolding = updateHoldingStatistics(\n          existingItem,\n          adjustedFormItem\n        );\n        //Pokud amount updatovaného holdingu se nerovná 0, tak dispatchuju updateHolding. Pokud se rovná 0 tak dispatchuju deleteHolding a holding se smaže z dtbs.\n        if (updatedHolding!.amount !== 0) {\n          console.log(updatedHolding);\n          dispatch(\n            updateHolding(adjustedFormItem.name, updatedHolding as HoldingItem)\n          );\n        } else {\n          dispatch(\n            deleteHolding({ userId: formData.userId, itemName: formData.name })\n          );\n        }\n      } else {\n        dispatch(addHolding(adjustedFormItem));\n      }\n      dispatch(addTransaction(adjustedFormItem));\n    }\n    setFormIsValid(false);\n  };\n\n  const handleBuySellChange = (\n    e: React.MouseEvent<HTMLElement>,\n    newBuySell: \"buy\" | \"sell\"\n  ): void => {\n    //Pokud se klikne na již zakliknutou možnost, tak to nic nezmění.\n    if (newBuySell !== null) setTransactionType(newBuySell);\n  };\n\n  return (\n    <StyledForm onSubmit={onSubmitHandler} ref={formRef}>\n      <div className=\"form\">\n        <div className=\"form-data-container\">\n          <TransactionType\n            buySell={formData.transactionType}\n            handleBuySellChange={handleBuySellChange}\n          />\n          <CryptoSelect selected={selectedCryptoInput} value={formData.name} />\n          <FormInput\n            input={{\n              id: \"Price per item\",\n              type: \"number\",\n              min: 0.01,\n              step: 0.01,\n              onChange: handleChange,\n            }}\n            startAdornment=\"$\"\n            autoFocus\n            name=\"price\"\n          />\n          <FormInput\n            input={{\n              id: \"Amount\",\n              type: \"number\",\n              min: 0.00001,\n              step: 0.00001,\n              onChange: handleChange,\n            }}\n            name=\"amount\"\n          />\n          <p className={formIsValid ? \"hide\" : \"display\"}>\n            You can't sell more than you hold. Your acutal holding of{\" \"}\n            {formData.name} is {existingHolding?.amount}.\n          </p>\n          <FormInput\n            input={{\n              id: \"Date of transaction\",\n              type: \"date\",\n              onChange: handleChange,\n            }}\n            name=\"date\"\n          />\n          <div className=\"buttons-container\">\n            <MyButton\n              type=\"submit\"\n              variant=\"contained\"\n              text=\"Add transaction\"\n              purple\n            />\n            <MyButton\n              variant=\"contained\"\n              text=\"Back\"\n              onClick={() => setFormShown(false)}\n              red\n            />\n          </div>\n        </div>\n      </div>\n    </StyledForm>\n  );\n};\nexport default Form;\n","import { StyledAddTransaction } from \"./styled\";\nimport Form from \"./Form\";\nimport { useContext, FC } from \"react\";\nimport FormContext from \"../../state/FormContext\";\nimport { useAppSelector } from \"../../state/hooks\";\nimport { RootState } from \"../..\";\nimport MyButton from \"../layout/MyButton\";\n\nconst AddTransaction: FC = () => {\n  const { formShown, setFormShown, setTransactionType } =\n    useContext(FormContext);\n  const holdings = useAppSelector((state: RootState) => state.holdings);\n\n  return (\n    <StyledAddTransaction>\n      {formShown ? (\n        <Form />\n      ) : (\n        holdings.length > 0 && (\n          <div className=\"button-container\">\n            <MyButton\n              variant=\"contained\"\n              onClick={() => {\n                setFormShown(true);\n                setTransactionType(\"buy\");\n              }}\n              text=\"Add transaction\"\n              purple\n            />\n          </div>\n        )\n      )}\n    </StyledAddTransaction>\n  );\n};\nexport default AddTransaction;\n","import ActualHoldings from \"../components/holdings/ActualHoldings\";\nimport AddTransaction from \"../components/add-transaction/AddTransaction\";\nimport { useEffect, useState, FC } from \"react\";\nimport { lsUserId } from \"../utils/ls-userId\";\n\nimport NeedToLogin from \"./screens/NeedToLogin\";\n\nconst Holdings: FC = () => {\n  const [user, setUser] = useState(lsUserId());\n\n  useEffect(() => {\n    setUser(lsUserId());\n  }, []);\n\n  return (\n    <>\n      {user ? (\n        <>\n          <AddTransaction />\n          <ActualHoldings />\n        </>\n      ) : (\n        <NeedToLogin />\n      )}\n    </>\n  );\n};\nexport default Holdings;\n","import { FC } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { StyledNeedToLogin } from \"./styled\";\nimport MyButton from \"../../components/layout/MyButton\";\n\nconst NeedToLogin: FC = () => {\n  const history = useHistory();\n\n  return (\n    <StyledNeedToLogin>\n      <div className=\"container\">\n        <h1>You need to sign in to see this page.</h1>\n        <MyButton\n          variant=\"contained\"\n          onClick={(): void => {\n            history.push(\"/auth\");\n          }}\n          text=\"Sign In\"\n          purple\n        />\n      </div>\n    </StyledNeedToLogin>\n  );\n};\nexport default NeedToLogin;\n","import {\n  FETCH_ALL_TRANSACTIONS,\n  ADD_TRANSACTION,\n  SET_ERROR,\n  START_LOADING,\n  STOP_LOADING,\n} from \"../../constants/actionTypes\";\nimport { Transaction } from \"../../common/modelTypes\";\nimport { Dispatch } from \"@reduxjs/toolkit\";\n\nimport {\n  HoldingsTransactionsActions,\n  ErrorLoadingActions,\n} from \"../../common/actionTypes\";\n\nimport * as api from \"../../api/index\";\n\nexport const getTransactions =\n  (userId: string) /* : ThunkAction<void, RootState, never, AnyAction>  */ =>\n  async (\n    dispatch: Dispatch<HoldingsTransactionsActions | ErrorLoadingActions>\n  ) => {\n    try {\n      dispatch({ type: START_LOADING });\n      const { data } = await api.fetchTransactions(userId);\n\n      dispatch({ type: FETCH_ALL_TRANSACTIONS, payload: data });\n      if (data) {\n        setTimeout(() => {\n          dispatch({ type: STOP_LOADING });\n        }, 100);\n      }\n    } catch (error: any) {\n      dispatch({ type: STOP_LOADING });\n      const errMsg =\n        error.response && error.response.data?.message\n          ? error.response.data.message\n          : error.message;\n      dispatch({ type: SET_ERROR, payload: errMsg });\n    }\n  };\n\nexport const addTransaction =\n  (transaction: Transaction) =>\n  async (\n    dispatch: Dispatch<HoldingsTransactionsActions | ErrorLoadingActions>\n  ) => {\n    try {\n      const { data } = await api.addTransaction(transaction);\n\n      dispatch({ type: ADD_TRANSACTION, payload: data });\n    } catch (error: any) {\n      const errMsg =\n        error.response && error.response.data?.message\n          ? error.response.data.message\n          : error.message;\n      dispatch({ type: SET_ERROR, payload: errMsg });\n    }\n  };\n","export function formatDate(date: any) {    \n  const day = date.getDate()\n  const month = date.getMonth()\n  const year = date.getFullYear()\n\n    return day + \"/\" + (month +1) + \"/\" + year;\n  }\n  \n","//Funkce na vytáhnutí userId z localStorage, pokud je přihlášen mailem/googleId pokud je přihlášen přes google ID.\nexport const lsUserId = () => {\n    const lsUser = localStorage.getItem(\"profile\")\n    let lsUserParsed \n    if (lsUser !== null) {\n        lsUserParsed = JSON.parse(lsUser)\n        if(lsUserParsed.result._id) {return lsUserParsed.result._id} else {return lsUserParsed.result.googleId}\n     } else {\n        return false\n     }\n    \n}","export const intlNumberFormat = (value: number, currency: string): string =>\n\n  new Intl.NumberFormat('en-EN', {\n    style: 'currency',\n    currency: currency,\n  }).format(value);\n\n  export const numberFormat = (number: number): string => {\n    const str = number.toString();\n    const before = str.split('.')[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n    const after = str.split('.')[1] ? `.${str.split('.')[1]}` : '';\n    const decimal = after.substring(0, 8);\n    const formattedNumber = before + decimal;\n    return formattedNumber;\n  };"],"names":["API","axios","baseURL","process","fetchHoldings","userId","get","params","addHolding","newHolding","post","updateHolding","name","updatedHolding","patch","deleteHolding","formData","fetchTransactions","addTransaction","newTransaction","registerUser","userData","loginUser","StyledHoldingCard","styled","positiveChange","negativeChange","theme","centerItems","StyledHoldings","StyledWrapper","dashboardData","useContext","DashboardContext","FormContext","setFormShown","setSelectedCrypto","setTransactionType","holdings","useAppSelector","state","Container","Grid","container","spacing","map","holding","cryptoObject","find","item","toLowerCase","PLUSD","amount","current_price","price","PLpercentage","lastUpdate","Date","last_updated","lastTransaction","date","xs","sm","md","lg","Paper","className","src","imageURL","alt","width","height","intlNumberFormat","toFixed","formatDate","toLocaleTimeString","IconButton","onClick","style","color","loadingState","errorAndLoading","dispatch","useAppDispatch","formShown","getDashboardData","lsUserId","useEffect","type","START_LOADING","api","data","FETCH_ALL_HOLDINGS","payload","setTimeout","STOP_LOADING","errMsg","response","message","SET_ERROR","getHoldings","loading","LoadingSpinner","length","MyButton","text","variant","purple","StyledAddTransaction","StyledForm","StyledCryptoName","StyledTransactionType","input","startAdornment","autoFocus","TextField","label","id","size","inputProps","required","margin","InputProps","InputAdornment","position","sx","borderBottomColor","borderColor","props","transactionType","FormControl","InputLabel","Select","labelId","value","onChange","e","selected","target","crypto","MenuItem","display","matchedCrypto","buySell","handleBuySellChange","ToggleButtonGroup","exclusive","ToggleButton","backgroundColor","holdingToBeUpdated","formItem","oldTotalPrice","updatedAveragePrice","initialState","useState","setFormData","formRef","useRef","existingHolding","setExistingHolding","formIsValid","setFormIsValid","selectedCrypto","existingItem","handleChange","onSubmit","preventDefault","parseInt","adjustedFormItem","current","reset","undefined","updateHoldingStatistics","console","log","UPDATE_HOLDING","DELETE_HOLDING","itemName","ADD_HOLDING","ref","newBuySell","min","step","red","user","setUser","NeedToLogin","history","useHistory","push","getTransactions","FETCH_ALL_TRANSACTIONS","transaction","ADD_TRANSACTION","getDate","getMonth","getFullYear","lsUserParsed","lsUser","localStorage","getItem","JSON","parse","result","_id","googleId","currency","Intl","NumberFormat","format","numberFormat","number","str","toString","split","replace","substring"],"sourceRoot":""}