{"version":3,"file":"static/js/299.f23b90f6.chunk.js","mappings":"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","sources":["api/index.ts","components/transactions/styled.tsx","components/transactions/TransactionsTable.tsx","components/transactions/TransactionsHistory.tsx","pages/Transactions.tsx","pages/screens/NeedToLogin.tsx","state/actions/transactions.tsx","utils/date-format.ts","utils/ls-userId.ts","utils/number-format.ts"],"sourcesContent":["import axios from \"axios\";\nimport { HoldingItem, Transaction, AuthData } from \"../common/modelTypes\";\n\nconst API = axios.create({baseURL: process.env.REACT_APP_API /* \"http://localhost:8000\" */   })\n\n//Holdings\nexport const fetchHoldings = (userId: string) =>\n  API.get(\"/holdings\", { params: { userId: userId } });\n\nexport const addHolding = (newHolding: HoldingItem) =>\n  API.post(\"/holdings\", newHolding);\n\nexport const updateHolding = (name: string, updatedHolding: HoldingItem) =>\n  API.patch(`${\"/holdings\"}/${name}`, updatedHolding);\n\n//Pokud se všechen Holding prodal (tzn. držený amount = 0), tak mažu z databáze. V případném opětovném nákupu se vytvoří znovu a od té doby se znovu počítá průměrná cena a P/L\nexport const deleteHolding = (formData: Object) =>\n  API.post(`${\"/holdings\"}/delete`, formData);\n\n//Transactions history\nexport const fetchTransactions = (userId: string) =>\n  API.get(\"/transactions\", { params: { userId: userId } });\n\nexport const addTransaction = (newTransaction: Transaction) =>\n  API.post(\"/transactions\", newTransaction);\n\n//Auth\nexport const registerUser = (userData: AuthData) =>\n  API.post(\"/register\", userData);\n\nexport const loginUser = (userData: AuthData) => API.post(\"/login\", userData);\n","import styled from \"styled-components\";\nimport { theme } from \"../../common/theme\";\n\nexport const StyledTransactionHistory = styled.div`\n  display: flex;\n  justify-content: center;\n  margin-top: 2%;\n\n  .transactions-container {\n    margin: 0 auto;\n    width: 950px;\n    ${theme.boxShadow}\n    border-radius: ${theme.borderRadius};\n    span {\n      display: inline-block;\n      width: 20%;\n    }\n  }\n  .no-transaction-found {\n    display: flex;\n    justify-content: center;\n    flex-direction: column;\n    margin-top: 10%;\n    button {\n      margin: 2%;\n    }\n    @media only screen and (max-width: 615px) {\n      h1 {\n        font-size: 18px;\n      }\n    }\n  }\n`;\n\nexport const TransactionsWrapper = styled.div`\n  .transactions-buy {\n    background-color: ${theme.color.green};\n  }\n\n  .transactions-sell {\n    background-color: ${theme.color.red};\n  }\n`;\n","import { DataGrid, GridColDef } from \"@mui/x-data-grid\";\nimport { useContext, FC } from \"react\";\nimport DashboardContext from \"../../state/DashboardContext\";\nimport { intlNumberFormat } from \"../../utils/number-format\";\nimport { TransactionsWrapper } from \"./styled\";\nimport { useAppSelector } from \"../../state/hooks\";\nimport { RootState } from \"../..\";\nimport { DashboardCryptoItem, Transaction } from \"../../common/modelTypes\";\nimport { formatDate } from \"../../utils/date-format\";\n\nconst TransactionsTable: FC = () => {\n  const tryTransactions = useAppSelector(\n    (state: RootState) => state.transactions\n  );\n  const transactions = tryTransactions ? tryTransactions : [];\n\n  const { dashboardData } = useContext(DashboardContext);\n\n  const rows = transactions.map((transaction: Transaction, index: number) => {\n    //Najdu crypto v contextu podle jména, aby se dosadila crypto ikona.\n    const dashboardCrypto = dashboardData?.find(\n      (crypto: DashboardCryptoItem) => crypto.name === transaction.name\n    );\n\n    const transactionDate = new Date(transaction.date);\n    return {\n      icon: dashboardCrypto?.imageURL,\n      id: index + 1,\n      name: transaction.name,\n      price: intlNumberFormat(transaction.price, \"usd\"),\n      amount: transaction.amount,\n      totalAmount: intlNumberFormat(\n        transaction.amount * transaction.price,\n        \"usd\"\n      ),\n      transactionType: transaction.transactionType,\n      date: formatDate(transactionDate),\n    };\n  });\n\n  const columns: GridColDef[] = [\n    {\n      field: \"id\",\n      headerName: \"#\",\n      width: 40,\n      align: \"center\",\n      headerAlign: \"center\",\n    },\n    {\n      field: \"icon\",\n      renderCell: (params) => {\n        return <img src={params.row.icon} width=\"25px\" height=\"25px\" />;\n      },\n      headerName: \"\",\n      width: 70,\n      align: \"center\",\n    },\n    {\n      field: \"name\",\n      headerName: \"Name\",\n      width: 130,\n    },\n\n    {\n      field: \"price\",\n      headerName: \"Price per item\",\n      width: 145,\n      headerAlign: \"right\",\n      align: \"right\",\n    },\n    {\n      field: \"amount\",\n      headerName: \"Amount\",\n      width: 100,\n      headerAlign: \"right\",\n      align: \"right\",\n    },\n    {\n      field: \"totalAmount\",\n      headerName: \"Total paid amount\",\n      width: 150,\n      headerAlign: \"right\",\n      align: \"right\",\n    },\n    {\n      field: \"transactionType\",\n      headerName: \"Transaction type\",\n      width: 180,\n      align: \"center\",\n      headerAlign: \"center\",\n    },\n    {\n      field: \"date\",\n      headerName: \"Date\",\n      width: 100,\n    },\n  ];\n\n  return (\n    <TransactionsWrapper>\n      <DataGrid\n        rows={rows}\n        columns={columns}\n        autoHeight\n        disableSelectionOnClick\n        getRowClassName={(params) =>\n          `transactions-${params.row.transactionType}`\n        }\n        sx={{\n          \"& .transactions-buy:hover\": { backgroundColor: \"#25b07b\" },\n          \"& .transactions-sell:hover\": { backgroundColor: \"#ea3943\" },\n        }}\n      />\n    </TransactionsWrapper>\n  );\n};\n\nexport default TransactionsTable;\n","import { StyledTransactionHistory } from \"./styled\";\nimport TransactionsTable from \"./TransactionsTable\";\nimport { useAppSelector, useAppDispatch } from \"../../state/hooks\";\nimport { RootState } from \"../..\";\nimport MyButton from \"../layout/MyButton\";\nimport { useContext, useEffect, FC } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport FormContext from \"../../state/FormContext\";\nimport DashboardContext from \"../../state/DashboardContext\";\nimport { getTransactions } from \"../../state/actions/transactions\";\nimport { lsUserId } from \"../../utils/ls-userId\";\nimport LoadingSpinner from \"../layout/LoadingSpinner\";\n\nconst TransactionsHistory: FC = () => {\n  const transactions = useAppSelector((state: RootState) => state.transactions);\n  /*   const transactions = tryTransactions ? tryTransactions : []; */\n\n  const loadingState = useAppSelector(\n    (state: RootState) => state.errorAndLoading\n  );\n  const dispatch = useAppDispatch();\n  const history = useHistory();\n  const { setFormShown, setSelectedCrypto, setTransactionType } =\n    useContext(FormContext);\n  const { getDashboardData } = useContext(DashboardContext);\n  const userId = lsUserId();\n\n  //fetch z mongoDB + fetch dashboard data\n  useEffect(() => {\n    dispatch(getTransactions(userId));\n    getDashboardData();\n  }, [dispatch]);\n\n  const onClickButton = () => {\n    history.push(\"/holdings\");\n    setFormShown(true);\n    setSelectedCrypto(\"Bitcoin\");\n    setTransactionType(\"buy\");\n  };\n\n  return (\n    <StyledTransactionHistory>\n      {loadingState[\"loading\"] ? (\n        <LoadingSpinner />\n      ) : transactions.length > 0 ? (\n        <div className=\"transactions-container\">\n          <TransactionsTable />\n        </div>\n      ) : (\n        <div className=\"no-transaction-found\">\n          <h1>No transactions found. Please add one.</h1>\n          <MyButton\n            text=\"Add transaction\"\n            onClick={onClickButton}\n            variant=\"contained\"\n            purple\n          />\n        </div>\n      )}\n    </StyledTransactionHistory>\n  );\n};\nexport default TransactionsHistory;\n","import TransactionsHistory from \"../components/transactions/TransactionsHistory\";\nimport NeedToLogin from \"./screens/NeedToLogin\";\nimport { lsUserId } from \"../utils/ls-userId\";\nimport { useState, useEffect, FC } from \"react\";\n\nconst Transactions: FC = () => {\n  const [user, setUser] = useState(lsUserId());\n\n  useEffect(() => {\n    setUser(lsUserId());\n  }, []);\n\n  return (\n    <>\n      {user ? (\n        <>\n          <TransactionsHistory />\n        </>\n      ) : (\n        <NeedToLogin />\n      )}\n    </>\n  );\n};\nexport default Transactions;\n","import { FC } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { StyledNeedToLogin } from \"./styled\";\nimport MyButton from \"../../components/layout/MyButton\";\n\nconst NeedToLogin: FC = () => {\n  const history = useHistory();\n\n  return (\n    <StyledNeedToLogin>\n      <div className=\"container\">\n        <h1>You need to sign in to see this page.</h1>\n        <MyButton\n          variant=\"contained\"\n          onClick={(): void => {\n            history.push(\"/auth\");\n          }}\n          text=\"Sign In\"\n          purple\n        />\n      </div>\n    </StyledNeedToLogin>\n  );\n};\nexport default NeedToLogin;\n","import {\n  FETCH_ALL_TRANSACTIONS,\n  ADD_TRANSACTION,\n  SET_ERROR,\n  START_LOADING,\n  STOP_LOADING,\n} from \"../../constants/actionTypes\";\nimport { Transaction } from \"../../common/modelTypes\";\nimport { Dispatch } from \"@reduxjs/toolkit\";\n\nimport {\n  HoldingsTransactionsActions,\n  ErrorLoadingActions,\n} from \"../../common/actionTypes\";\n\nimport * as api from \"../../api/index\";\n\nexport const getTransactions =\n  (userId: string) /* : ThunkAction<void, RootState, never, AnyAction>  */ =>\n  async (\n    dispatch: Dispatch<HoldingsTransactionsActions | ErrorLoadingActions>\n  ) => {\n    try {\n      dispatch({ type: START_LOADING });\n      const { data } = await api.fetchTransactions(userId);\n\n      dispatch({ type: FETCH_ALL_TRANSACTIONS, payload: data });\n      if (data) {\n        setTimeout(() => {\n          dispatch({ type: STOP_LOADING });\n        }, 100);\n      }\n    } catch (error: any) {\n      dispatch({ type: STOP_LOADING });\n      const errMsg =\n        error.response && error.response.data?.message\n          ? error.response.data.message\n          : error.message;\n      dispatch({ type: SET_ERROR, payload: errMsg });\n    }\n  };\n\nexport const addTransaction =\n  (transaction: Transaction) =>\n  async (\n    dispatch: Dispatch<HoldingsTransactionsActions | ErrorLoadingActions>\n  ) => {\n    try {\n      const { data } = await api.addTransaction(transaction);\n\n      dispatch({ type: ADD_TRANSACTION, payload: data });\n    } catch (error: any) {\n      const errMsg =\n        error.response && error.response.data?.message\n          ? error.response.data.message\n          : error.message;\n      dispatch({ type: SET_ERROR, payload: errMsg });\n    }\n  };\n","export function formatDate(date: any) {    \n  const day = date.getDate()\n  const month = date.getMonth()\n  const year = date.getFullYear()\n\n    return day + \"/\" + (month +1) + \"/\" + year;\n  }\n  \n","//Funkce na vytáhnutí userId z localStorage, pokud je přihlášen mailem/googleId pokud je přihlášen přes google ID.\nexport const lsUserId = () => {\n    const lsUser = localStorage.getItem(\"profile\")\n    let lsUserParsed \n    if (lsUser !== null) {\n        lsUserParsed = JSON.parse(lsUser)\n        if(lsUserParsed.result._id) {return lsUserParsed.result._id} else {return lsUserParsed.result.googleId}\n     } else {\n        return false\n     }\n    \n}","export const intlNumberFormat = (value: number, currency: string): string =>\n\n  new Intl.NumberFormat('en-EN', {\n    style: 'currency',\n    currency: currency,\n  }).format(value);\n\n  export const numberFormat = (number: number): string => {\n    const str = number.toString();\n    const before = str.split('.')[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n    const after = str.split('.')[1] ? `.${str.split('.')[1]}` : '';\n    const decimal = after.substring(0, 8);\n    const formattedNumber = before + decimal;\n    return formattedNumber;\n  };"],"names":["API","axios","baseURL","process","fetchHoldings","userId","get","params","addHolding","newHolding","post","updateHolding","name","updatedHolding","patch","deleteHolding","formData","fetchTransactions","addTransaction","newTransaction","registerUser","userData","loginUser","StyledTransactionHistory","styled","theme","TransactionsWrapper","tryTransactions","useAppSelector","state","transactions","dashboardData","useContext","DashboardContext","rows","map","transaction","index","dashboardCrypto","find","crypto","transactionDate","Date","date","icon","imageURL","id","price","intlNumberFormat","amount","totalAmount","transactionType","formatDate","columns","field","headerName","width","align","headerAlign","renderCell","src","row","height","DataGrid","autoHeight","disableSelectionOnClick","getRowClassName","sx","backgroundColor","loadingState","errorAndLoading","dispatch","useAppDispatch","history","useHistory","FormContext","setFormShown","setSelectedCrypto","setTransactionType","getDashboardData","lsUserId","useEffect","getTransactions","LoadingSpinner","length","className","MyButton","text","onClick","push","variant","purple","useState","user","setUser","NeedToLogin","type","START_LOADING","api","data","FETCH_ALL_TRANSACTIONS","payload","setTimeout","STOP_LOADING","errMsg","response","message","SET_ERROR","ADD_TRANSACTION","getDate","getMonth","getFullYear","lsUserParsed","lsUser","localStorage","getItem","JSON","parse","result","_id","googleId","value","currency","Intl","NumberFormat","style","format","numberFormat","number","str","toString","split","replace","substring"],"sourceRoot":""}